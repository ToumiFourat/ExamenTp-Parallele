package InterfaceGraphique;

import gestioncolis.Colis;
import gestioncolis.GestionnaireColis;
import SynchronisationThreads.SimulateurLivraison;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.Date;

public class MainApplication extends JFrame {

    private final GestionnaireColis gestionnaireColis = new GestionnaireColis();
    private final DefaultListModel<Colis> listModel = new DefaultListModel<>();
    private final JList<Colis> colisList = new JList<>(listModel);

    private JPanel formPanel;
    private JTextField utilisateurField;
    private JTextField destinationField;
    private JButton ajouterButton;

    public MainApplication() {
        setTitle("Système de Livraison de Colis");
        setSize(900, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // Configuration principale
        JPanel mainPanel = new JPanel(new BorderLayout(20, 20));
        mainPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        // En-tête
        JLabel headerLabel = new JLabel("Gestion des Colis", SwingConstants.CENTER);
        headerLabel.setFont(new Font("SansSerif", Font.BOLD, 24));

        // Formulaire
        initComponents();

        // Liste des colis
        JScrollPane scrollPane = new JScrollPane(colisList);
        scrollPane.setBorder(BorderFactory.createTitledBorder("Liste des Colis"));
        colisList.setFont(new Font("SansSerif", Font.PLAIN, 14));

        // Intégration de l'image dans la liste
        colisList.setCellRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index,
                                                          boolean isSelected, boolean cellHasFocus) {
                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (value instanceof Colis) {
                    Colis colis = (Colis) value;
                    setText(colis.getDetailsUtilisateur() + " - " + colis.getDestination());
                    try {
                        ImageIcon icon = new ImageIcon(getClass().getResource("/colis.png"));
                        Image image = icon.getImage().getScaledInstance(20, 20, Image.SCALE_SMOOTH);
                        setIcon(new ImageIcon(image));
                    } catch (Exception e) {
                        System.err.println("Erreur lors du chargement de l'image.");
                    }
                }
                return this;
            }
        });

        // Pied de page
        JLabel footerLabel = new JLabel("Application développée par Fourat", SwingConstants.CENTER);
        footerLabel.setFont(new Font("SansSerif", Font.ITALIC, 12));

        // Ajout des composants au panneau principal
        mainPanel.add(headerLabel, BorderLayout.NORTH);
        mainPanel.add(formPanel, BorderLayout.WEST);
        mainPanel.add(scrollPane, BorderLayout.CENTER);
        mainPanel.add(footerLabel, BorderLayout.SOUTH);

        // Ajouter le panneau principal à la fenêtre
        add(mainPanel);

        new SimulateurLivraison(gestionnaireColis, this).start();
    }

    private void initComponents() {
        formPanel = new JPanel(new GridBagLayout());
        formPanel.setBorder(BorderFactory.createTitledBorder("Ajouter un Colis"));

        // Configuration indépendante pour chaque composant avec de nouvelles contraintes
        addComponent(formPanel, new JLabel("Nom Utilisateur:"), 0, 0);
        utilisateurField = new JTextField(20);
        addComponent(formPanel, utilisateurField, 1, 0);

        addComponent(formPanel, new JLabel("Destination:"), 0, 1);
        destinationField = new JTextField(20);
        addComponent(formPanel, destinationField, 1, 1);

        ajouterButton = new JButton("Ajouter");
        addComponent(formPanel, ajouterButton, 1, 2);

        ajouterButton.addActionListener((ActionEvent e) -> {
            String utilisateur = utilisateurField.getText();
            String destination = destinationField.getText();
            if (!utilisateur.isEmpty() && !destination.isEmpty()) {
                Colis colis = new Colis(
                        gestionnaireColis.obtenirColis().size() + 1,
                        "En attente",
                        utilisateur,
                        destination,
                        new Date(),
                        null
                );
                gestionnaireColis.ajouterColis(colis);
                utilisateurField.setText("");
                destinationField.setText("");
                mettreAJourListe();
            } else {
                JOptionPane.showMessageDialog(this, "Veuillez remplir tous les champs.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
            }
        });
    }

    private void addComponent(Container container, Component component, int x, int y) {
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.gridx = x;
        gbc.gridy = y;
        gbc.anchor = GridBagConstraints.WEST;
        container.add(component, gbc);
    }

    private void mettreAJourListe() {
        listModel.clear();
        for (Colis colis : gestionnaireColis.obtenirColis()) {
            listModel.addElement(colis);
        }
    }

    public synchronized void notifierChangementEtat() {
        SwingUtilities.invokeLater(this::mettreAJourListe);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new MainApplication().setVisible(true));
    }
}
