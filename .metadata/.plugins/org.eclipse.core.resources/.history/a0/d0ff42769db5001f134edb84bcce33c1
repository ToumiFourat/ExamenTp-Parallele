package InterfaceGraphique;

import gestioncolis.Colis;
import gestioncolis.GestionnaireColis;
import SynchronisationThreads.SimulateurLivraison;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.Date;

public class MainApplication extends JFrame {

    private final GestionnaireColis gestionnaireColis = new GestionnaireColis();
    private final DefaultListModel<Colis> listModel = new DefaultListModel<>();
    private final JList<Colis> colisList = new JList<>(listModel);

    public MainApplication() {
        setTitle("Système de Livraison de Colis");
        setSize(900, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // Utiliser un look and feel moderne
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }

        // Panneau principal avec image de fond
        BackgroundPanel mainPanel = new BackgroundPanel(new ImageIcon("colis.avif").getImage());
        mainPanel.setLayout(new BorderLayout(20, 20));
        mainPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        // En-tête de l'application
        JLabel headerLabel = new JLabel("Gestion des Colis", SwingConstants.CENTER);
        headerLabel.setFont(new Font("SansSerif", Font.BOLD, 28));
        headerLabel.setForeground(Color.WHITE);

        // Panneau de formulaire pour ajouter des colis
        JPanel formPanel = creerFormulaireAjout();

        // Liste des colis
        JScrollPane scrollPane = new JScrollPane(colisList);
        scrollPane.setBorder(BorderFactory.createTitledBorder("Liste des Colis"));
        colisList.setFont(new Font("SansSerif", Font.PLAIN, 14));
        colisList.setBackground(new Color(245, 245, 245));

        // Ajout d'un listener pour afficher les détails des colis
        colisList.addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting() && colisList.getSelectedValue() != null) {
                Colis selectedColis = colisList.getSelectedValue();
                JOptionPane.showMessageDialog(this, selectedColis.afficherDetails(),
                        "Détails du Colis", JOptionPane.INFORMATION_MESSAGE);
            }
        });

        // Pied de page de l'application
        JLabel footerLabel = new JLabel("Application développée par Vous", SwingConstants.CENTER);
        footerLabel.setFont(new Font("SansSerif", Font.ITALIC, 12));
        footerLabel.setForeground(Color.WHITE);

        // Ajout des composants au panneau principal
        mainPanel.add(headerLabel, BorderLayout.NORTH);
        mainPanel.add(formPanel, BorderLayout.WEST);
        mainPanel.add(scrollPane, BorderLayout.CENTER);
        mainPanel.add(footerLabel, BorderLayout.SOUTH);

        // Ajouter le panneau principal à la fenêtre
        add(mainPanel);

        // Lancer le simulateur de livraison
        new SimulateurLivraison(gestionnaireColis, this).start();
    }

    private JPanel creerFormulaireAjout() {
        JPanel formPanel = new JPanel(new GridBagLayout());
        formPanel.setBorder(BorderFactory.createTitledBorder(null, "Ajouter un Colis", 
                TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, 
                new Font("SansSerif", Font.BOLD, 16), Color.WHITE));
        formPanel.setOpaque(false);

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        JTextField utilisateurField = new JTextField(20);
        JTextField destinationField = new JTextField(20);
        JButton ajouterButton = new JButton("Ajouter");

        // Styliser le bouton ajouter
        styleButton(ajouterButton, new Color(46, 204, 113));

        gbc.gridx = 0;
        gbc.gridy = 0;
        addLabel(formPanel, "Nom Utilisateur:", gbc);

        gbc.gridx = 1;
        formPanel.add(utilisateurField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        addLabel(formPanel, "Destination:", gbc);

        gbc.gridx = 1;
        formPanel.add(destinationField, gbc);

        gbc.gridx = 1;
        gbc.gridy = 2;
        formPanel.add(ajouterButton, gbc);

        // Action pour ajouter un colis
        ajouterButton.addActionListener((ActionEvent e) -> {
            String utilisateur = utilisateurField.getText();
            String destination = destinationField.getText();
            if (!utilisateur.isEmpty() && !destination.isEmpty()) {
                Colis colis = new Colis(
                        gestionnaireColis.obtenirColis().size() + 1,
                        "En attente",
                        utilisateur,
                        destination,
                        new Date(),
                        null
                );
                gestionnaireColis.ajouterColis(colis);
                utilisateurField.setText("");
                destinationField.setText("");
                mettreAJourListe();
            } else {
                JOptionPane.showMessageDialog(this, "Veuillez remplir tous les champs.",
                        "Erreur", JOptionPane.ERROR_MESSAGE);
            }
        });

        return formPanel;
    }

    private void addLabel(JPanel panel, String text, GridBagConstraints gbc) {
        JLabel label = new JLabel(text);
        label.setForeground(Color.WHITE);
        label.setFont(new Font("SansSerif", Font.BOLD, 14));
        panel.add(label, gbc);
    }

    private void styleButton(JButton button, Color bgColor) {
        button.setBackground(bgColor);
        button.setForeground(Color.WHITE);
        button.setFont(new Font("SansSerif", Font.BOLD, 14));
        button.setFocusPainted(false);
        button.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(new Color(44, 62, 80)),
                BorderFactory.createEmptyBorder(10, 25, 10, 25)
        ));
    }

    private void mettreAJourListe() {
        listModel.clear();
        for (Colis colis : gestionnaireColis.obtenirColis()) {
            listModel.addElement(colis);
        }
    }

    public synchronized void notifierChangementEtat() {
        SwingUtilities.invokeLater(this::mettreAJourListe);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new MainApplication().setVisible(true));
    }
}

class BackgroundPanel extends JPanel {
    private Image backgroundImage;

    public BackgroundPanel(Image backgroundImage) {
        this.backgroundImage = backgroundImage;
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (backgroundImage != null) {
            g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this);
        }
    }
}
